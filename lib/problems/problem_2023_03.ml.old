open Base

let year = 2023
let day = 3

type value = Symbol of char | Number of int | Blank
type point = { x : int; y : int; v : value; counted : bool }

let parse_matrix input =
  input
  |> String.split_on_chars ~on:[ '\n' ]
  |> List.filter ~f:(fun s -> String.length s > 0)
  |> Array.of_list
  |> Array.mapi ~f:(fun y line ->
         String.to_array line
         |> Array.mapi ~f:(fun x xs ->
                if Char.is_digit xs then
                  {
                    x;
                    y;
                    v = Number (Int.of_string (String.of_char xs));
                    counted = false;
                  }
                else if not (Char.equal xs '.') then
                  { x; y; v = Symbol xs; counted = false }
                else { x; y; v = Blank; counted = false }))

let print_matrix arr =
  Stdio.printf "  ";
  Array.iteri arr.(0) ~f:(fun i _ -> Stdio.printf "%n" i);
  Stdio.printf "\n";
  Array.iteri arr ~f:(fun j line ->
      Stdio.printf "%n " j;
      Array.iter line ~f:(fun point ->
          match point.v with
          | Symbol s -> Stdio.printf "%c" s
          | Blank -> Stdio.printf "."
          | Number v -> Stdio.printf "%n" v);
      Stdio.printf "\n")

let filter_to_symbol_points matrix =
  matrix
  |> Array.map ~f:(fun line ->
         Array.map line ~f:(fun p ->
             match p.v with
             | Symbol _ -> Some (p.x, p.y)
             | Number _ -> None
             | Blank -> None)
         |> Array.filter_opt)
  |> Array.fold ~init:[||] ~f:(fun acc line -> Array.append acc line)

let get_all_digits arr point =
  (* Stdio.printf *)
  (* "\n\ *)
     (*    ------------------------------\n\ *)
     (*    Starting new point at (%n,%n)\n\ *)
     (*    ------------------------------\n" *)
  (*   point.x point.y; *)
  if arr.(point.y).(point.x).counted then
    (* Stdio.printf "This point is already counted\n"; *)
    None
  else
    (* (match point.v with *)
    (* | Symbol _ | Blank -> failwith "no" *)
    (* | Number v -> Stdio.printf "First value is %n\n" v); *)
    let rec go_left p i arr =
      (* Stdio.printf "--\n"; *)
      (* Stdio.printf "matrix after step:\n"; *)
      (* print_matrix arr; *)
      (* Stdio.printf "--\n"; *)
      let x, y = (p.x, p.y) in
      if Int.equal x 0 then (* Stdio.printf "Left is out of bounds\n"; *)
        i
      else
        let l = arr.(y).(x - 1) in
        (* Stdio.printf "Going left to (%n,%n)\n" l.x l.y; *)
        (* (match l.v with *)
        (* | Symbol s -> Stdio.printf "Found %c; i stays at %n\n" s i *)
        (* | Blank -> Stdio.printf "Found blank; i stays at %n\n" i *)
        (* | Number v -> Stdio.printf "Found %n" v); *)
        match l.v with
        | Symbol _ | Blank -> i
        | Number v ->
            arr.(y).(x - 1) <- { l with counted = true };
            let i' = (v * Int.pow 10 (String.length (Int.to_string i))) + i in
            (* Stdio.printf "; i is now %n\n" i'; *)
            go_left l i' arr
    in
    let rec go_right p i arr =
      let x, y = (p.x, p.y) in
      if Int.equal x (Array.length (Array.get arr y) - 1) then i
      else
        let r = arr.(y).(x + 1) in
        match r.v with
        | Symbol _ | Blank -> i
        | Number v ->
            arr.(y).(x + 1) <- { r with counted = true };
            let i' = (i * 10) + v in
            go_right r i' arr
    in
    match point.v with
    | Symbol _ | Blank -> failwith "You should not be here"
    | Number i ->
        arr.(point.y).(point.x) <- { point with counted = true };
        let step_1 = go_left arr.(point.y).(point.x) i arr in
        let step_2 = go_right arr.(point.y).(point.x) step_1 arr in
        Some step_2

let get_adjacent_coords ((x, y) : int * int) =
  [
    (x - 1, y - 1);
    (x, y - 1);
    (x + 1, y - 1);
    (x - 1, y);
    (x + 1, y);
    (x - 1, y + 1);
    (x, y + 1);
    (x + 1, y + 1);
  ]

let get_uncounted_adjacent_numbers arr coords =
  coords |> get_adjacent_coords
  |> List.filter_map ~f:(fun (x, y) ->
         let p = arr.(y).(x) in
         match p.v with
         | Symbol _ | Blank -> None
         | Number _ -> if p.counted then None else Some p)

module Part_1 = struct
  let run (input : string) : (string, string) Result.t =
    let arr = parse_matrix input in
    (* print_matrix arr; *)
    let symbols = filter_to_symbol_points arr in
    let numbers =
      Array.fold symbols ~init:[] ~f:(fun acc point ->
          let a_nums = get_uncounted_adjacent_numbers arr point in
          let vals = List.map a_nums ~f:(fun p -> get_all_digits arr p) in
          List.append acc (List.filter_opt vals))
    in
    List.iter numbers ~f:(fun n -> Stdio.printf "%d, " n);
    Stdio.printf "\n\n";
    Ok (Int.to_string (List.fold numbers ~init:0 ~f:( + )))
end

module Part_2 = struct
  let run (input : string) : (string, string) Result.t = Ok input
end
